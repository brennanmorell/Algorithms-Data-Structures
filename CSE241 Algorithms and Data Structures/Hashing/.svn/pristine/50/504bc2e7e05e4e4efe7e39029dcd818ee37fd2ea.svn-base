//
// STRINGTABLE.JAVA
// A hash table mapping Strings to their positions in the the pattern sequence
// You get to fill in the methods for this part.
//
public class StringTable {
    
    //
    // Create an empty table big enough to hold maxSize records.
    //
	private Record[] table;
    public StringTable(int maxSize) 
    {
    	table = new Record[maxSize];
    }
    
    
    //
    // Insert a Record r into the table.  Return true if
    // successful, false if the table is full.  You shouldn't ever
    // get two insertions with the same key value, but you may
    // simply return false if this happens.
    //
    public boolean insert(Record r) 
    { 
    	int[] slotsTried = new int[table.length];
    	int k = toHashKey(r.key); ///fix me and make it based off of r
    	int slot = baseHash(k);
    	if(table[slot] == null)
    	{
    		r.positions.add(slot);
    		table[slot] = r;
    		return true;
    	}
    	else
    	{
    		slotsTried[0] = slot;
    		int i = 1;
    		while(i < table.length)
    		{
    			slot = slotsTried[i-1] + stepHash(k);
    			if(table[slot] == null)
    			{
    				r.positions.add(slot);
    				table[slot] = r;
    				return true;
    			}
    			else
    			{
    				slotsTried[i] = slot;
    				i++;
    			}
    		}
    	}
    	
    	return false;
    }
    
    
    //
    // Delete a Record r from the table.  Note that you'll have to
    // find the record first unless you keep some extra information
    // in the Record structure.
    //
    public void remove(Record r) 
    {
    	Record matching = find(r.key);
    	if(matching != null)
    	{
    		table[matching.positions.get(0)] = null; //removed
    		return;
    	}
    }
    
    
    //
    // Find a record with a key matching the input.  Return the
    // record if it exists, or null if no matching record is found.
    //
    public Record find(String key) 
    {
    	int[] slotsTried = new int[table.length];
    	int k = toHashKey(key); ///fix me and make it based off of r
    	int slot = baseHash(k);
    	if(table[slot] != null)
    	{
    		//check if deleted
    		//else do below
    		if(table[slot].key == key)
    		{
    			Record r = new Record(key);
    			r.positions.add(slot);
    			return r;
    		}
    		else
    		{
    			slotsTried[0] = slot;
        		int i = 1;
        		while(i < table.length)
        		{
        			slot = slotsTried[i-1] + stepHash(k);
        			if(table[slot] != null)
        			{
        				if(table[slot].key == key)
        				{
        					//we found it! update positions and return it
        					return table[slot];
        				}
        				else
        				{
        					slotsTried[i] = slot;
        					i++;
        				}
        			}
        			else
        			{
        				//we got to a null it isnt in table
        				return null;
        			}
        		}
    		}
    	}
    	else
    	{
    	   return null; //we got to a null so it isnt in table
    	}
    }
    
    
    ///////////////////////////////////////////////////////////////////////
    
    
    // Convert a String key into an integer that serves as input to hash
    // functions.  This mapping is based on the idea of a linear-congruential
    // pesudorandom number generator, in which successive values r_i are 
    // generated by computing
    //    r_i = ( A * r_(i-1) + B ) mod M
    // A is a large prime number, while B is a small increment thrown in
    // so that we don't just compute successive powers of A mod M.
    //
    // We modify the above generator by perturbing each r_i, adding in
    // the ith character of the string and its offset, to alter the
    // pseudorandom sequence.
    //
    int toHashKey(String s)
    {
	int A = 1952786893;
	int B = 367257;
	int v = B;
	
	for (int j = 0; j < s.length(); j++)
	    {
		char c = s.charAt(j);
		v = A * (v + (int) c + j) + B;
	    }
	
	if (v < 0) v = -v;
	return v;
    }
    
    int baseHash(int hashKey)
    {
	// Fill in your own hash function here
    	double A = .8675;
    	return (int)Math.floor(table.length*((hashKey*A)-Math.floor(hashKey*A)));
    }
    
    int stepHash(int hashKey)
    {
    	double A = .7141;
    	return (int)Math.floor(table.length*((hashKey*A)-Math.floor(hashKey*A)));;
    }
}
